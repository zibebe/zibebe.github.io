<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title></title>
    <link rel="self" type="application/atom+xml" href="https://zibebe.net/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://zibebe.net"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-12-08T00:00:00+00:00</updated>
    <id>https://zibebe.net/atom.xml</id>
    <entry xml:lang="en">
        <title>Low Level Programming: Part 1</title>
        <published>2024-12-08T00:00:00+00:00</published>
        <updated>2024-12-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zibebe.net/posts/lowlevel-part1/"/>
        <id>https://zibebe.net/posts/lowlevel-part1/</id>
        
        <content type="html" xml:base="https://zibebe.net/posts/lowlevel-part1/">&lt;p&gt;In this course, I will guide you through the essentials of low-level
programming, starting with the fundamentals of C programming. This foundation
will be crucial for understanding the more advanced topics that follow. While
some basic programming knowledge is helpful, this course is designed to be
accessible to those with a beginner to intermediate skill level.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup&quot; aria-label=&quot;Anchor link for: setup&quot;&gt;Setup&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;compiler&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#compiler&quot; aria-label=&quot;Anchor link for: compiler&quot;&gt;Compiler&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To get started with this course, you need to set up the necessary tools. The
first step is to ensure you have a C compiler installed, such as &lt;code&gt;gcc&lt;&#x2F;code&gt;. You can
refer to the &lt;a href=&quot;https:&#x2F;&#x2F;gcc.gnu.org&#x2F;install&#x2F;&quot;&gt;official installation manual&lt;&#x2F;a&gt; for
detailed instructions, or you can use your operating system&#x27;s package manager to
install it. Here are some quick commands for popular operating systems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Installation (Linux&#x2F;macOS):&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;sudo apt-get install gcc  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# Debian&#x2F;Ubuntu
&lt;&#x2F;span&gt;&lt;span&gt;sudo dnf install gcc      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# Fedora
&lt;&#x2F;span&gt;&lt;span&gt;brew install gcc          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# macOS
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Installation (Windows):&lt;&#x2F;strong&gt; You can install MinGW, which includes &lt;code&gt;gcc&lt;&#x2F;code&gt;.
Follow the instructions on the
&lt;a href=&quot;https:&#x2F;&#x2F;mingw-w64.org&#x2F;doku.php&#x2F;download&quot;&gt;MinGW website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;text-editor&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#text-editor&quot; aria-label=&quot;Anchor link for: text-editor&quot;&gt;Text Editor&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;While the choice of editor or integrated development environment (IDE) is
largely a matter of personal preference, I recommend using a terminal-based
editor for this course. This is because we will be working extensively in the
terminal. I absolutely recommend getting started with &lt;code&gt;Vim&lt;&#x2F;code&gt; as a terminal
editor:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Installation (Linux&#x2F;macOS)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;sudo apt-get install vim  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# Debian&#x2F;Ubuntu
&lt;&#x2F;span&gt;&lt;span&gt;sudo dnf install vim      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# Fedora
&lt;&#x2F;span&gt;&lt;span&gt;brew install vim          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# macOS
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Installation (Windows):&lt;&#x2F;strong&gt; Follow the instructions on the
&lt;a href=&quot;https:&#x2F;&#x2F;www.vim.org&#x2F;download.php&quot;&gt;Vim website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Anyhow, choose the tool that you are most comfortable with, and you&#x27;ll be
well-prepared to follow along with the course.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-the-setup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#test-the-setup&quot; aria-label=&quot;Anchor link for: test-the-setup&quot;&gt;Test the Setup&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To ensure your environment is set up correctly, we will create a simple &quot;Hello
World&quot; program. Follow these steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create the &lt;code&gt;hello_world.c&lt;&#x2F;code&gt; file:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Open your chosen editor or IDE and create a new file named &lt;code&gt;hello_world.c&lt;&#x2F;code&gt;.
Add the following content to the file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;Hello World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Compile the Program:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Open a terminal and navigate to the directory where you saved
&lt;code&gt;hello_world.c&lt;&#x2F;code&gt;. Compile the program using the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;gcc hello_world.c&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; hello_world
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Run the Program:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Execute the compiled binary by running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ .&#x2F;hello_world
&lt;&#x2F;span&gt;&lt;span&gt;Hello World!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you encounter any issues, double-check that your compiler and editor are
installed correctly and that you are in the correct directory when running
the commands.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;memory-management&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#memory-management&quot; aria-label=&quot;Anchor link for: memory-management&quot;&gt;Memory Management&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Understanding memory management is crucial for effective low-level programming,
as it directly impacts the performance, reliability, and efficiency of your
code. Here is a short comparison between &lt;code&gt;Static&lt;&#x2F;code&gt;, &lt;code&gt;Stack&lt;&#x2F;code&gt;, and &lt;code&gt;Heap&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;static&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#static&quot; aria-label=&quot;Anchor link for: static&quot;&gt;Static&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lifetime&lt;&#x2F;strong&gt;: Variables are allocated at compile time and exist for the entire
duration of the program. They are not created or destroyed during runtime.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Size&lt;&#x2F;strong&gt;: The size is fixed and determined at compile time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Speed&lt;&#x2F;strong&gt;: Accessing static variables is relatively fast because they have a
fixed memory location.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;&#x2F;strong&gt;: Ideal for global variables, static local variables, and constants
that need to retain their value across function calls and throughout the
program&#x27;s execution.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;stack&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#stack&quot; aria-label=&quot;Anchor link for: stack&quot;&gt;Stack&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lifetime:&lt;&#x2F;strong&gt; Variables are allocated on the stack with a known, fixed
lifetime (usually tied to function scope).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Size:&lt;&#x2F;strong&gt; The memory is managed automatically; variables go out of scope when
their containing block ends.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Speed:&lt;&#x2F;strong&gt; Accessing variables stored in the stack is faster because they have
contiguous memory and direct access.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Usage:&lt;&#x2F;strong&gt; Ideal for local variables and function call parameters. Each
function has its own stack frame.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;heap&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#heap&quot; aria-label=&quot;Anchor link for: heap&quot;&gt;Heap&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lifetime:&lt;&#x2F;strong&gt; Memory allocated on the heap can persist beyond the lifetime of
a single function (until explicitly deallocated).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Size:&lt;&#x2F;strong&gt; The size is flexible; it can grow or shrink dynamically during
program execution.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Speed:&lt;&#x2F;strong&gt; Accessing variables stored in the heap is slower because there&#x27;s no
direct access and more indirection through pointers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Usage:&lt;&#x2F;strong&gt; Ideal for dynamic memory allocation, such as when allocating large
structures that need to persist across function calls.
summary:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Static&lt;&#x2F;code&gt; provides persistent storage that exists for the entire duration of
the program.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Stack&lt;&#x2F;code&gt; provides fast but temporary storage, ideal for local variables and
function parameters.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Heap&lt;&#x2F;code&gt; offers slower but flexible and persistent storage, suitable for dynamic
memory allocation and large data structures.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you want to get more informations about memory allocation and management here
are some useful links:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stack-based_memory_allocation&quot;&gt;Stack-based memory allocation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Memory_management&quot;&gt;Memory management&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;examples-in-c&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#examples-in-c&quot; aria-label=&quot;Anchor link for: examples-in-c&quot;&gt;Examples in C&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Static Variable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This little example shows what happens when you declar variables with the
static keyword.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; fglob_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;%d\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;fglob_x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;%d\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, fglob_x);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    test();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Variable &lt;code&gt;fglob_x&lt;&#x2F;code&gt; will be visible for all functions in the file
above. So, more or less it is a global variable scoped to a specific file.&lt;&#x2F;p&gt;
&lt;p&gt;If you compile and run the program you will see, that the variable &lt;code&gt;x&lt;&#x2F;code&gt; in
the &lt;code&gt;test&lt;&#x2F;code&gt; function will keep its value and is not reinitialized with every
call:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;fglob_x: 42
&lt;&#x2F;span&gt;&lt;span&gt;x: 49
&lt;&#x2F;span&gt;&lt;span&gt;x: 56
&lt;&#x2F;span&gt;&lt;span&gt;x: 63
&lt;&#x2F;span&gt;&lt;span&gt;x: 70
&lt;&#x2F;span&gt;&lt;span&gt;x: 77
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
</feed>
